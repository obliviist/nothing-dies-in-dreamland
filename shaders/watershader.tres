[gd_resource type="ShaderMaterial" load_steps=8 format=2]

[sub_resource type="Shader" id=11]
code = "shader_type spatial;
render_mode specular_phong;//, unshaded;

uniform float speed : hint_range(-1,1) = 0.0;

uniform sampler2D noise1;
uniform sampler2D noise2;
uniform sampler2D normalmap : hint_normal;

uniform vec4 color : hint_color;
uniform vec4 edge_color : hint_color;

uniform float edge_scale = 0.25;
uniform float near = 0.1;
uniform float far = 100f;
// float

uniform vec2 wave_strength = vec2(0.5, 0.25);
uniform vec2 wave_frequency = vec2(12.0, 12.0);
uniform vec2 time_factor = vec2(1.0, 2.0);
// waves

float waves(vec2 pos, float time){
	return (wave_strength.y * sin(pos.y * wave_frequency.y + time * time_factor.y)) + (wave_strength.x * sin(pos.x * wave_frequency.x + time * time_factor.x));
}

void vertex(){
	VERTEX.y += waves(VERTEX.xz, TIME);
}

float rim(float depth){
	depth = 2f * depth -1f;
	return near * far / (far + depth * (near - far));
}




void fragment(){
	float time = TIME * speed;
	
	vec3 n1 = texture(noise1, UV + time).rgb;
	vec3 n2 = texture (noise2, UV - time * 0.02).rgb;
	
	vec2 uv_movement = UV * 4f;
	uv_movement +- TIME * speed * 4f;
	
	float sum = (n1.r + n2.r) - 1f;
	
	float z_depth = rim(texture(DEPTH_TEXTURE, SCREEN_UV).x);
	float z_pos = rim(FRAGCOORD.z);
	float diff = z_depth - z_pos;
	
	vec2 displacement = vec2(sum * 0.05);
	diff += displacement.x * 100f;
	
	vec4 col = mix(edge_color, color, step(edge_scale, diff));
	
	vec4 alpha = texture(SCREEN_TEXTURE, SCREEN_UV + displacement);
	
	float fin = 0.0;
	if (sum > 0.0 && sum < 0.4) fin = 0.1;
	if (sum > 0.4 && sum < 0.8) fin = 0.0;
	if (sum > 0.8) fin = 1f;
	
	ALBEDO = vec3(fin) + mix(alpha.rgb, col.rgb, color.a);
	
	NORMALMAP = texture(normalmap, uv_movement).rgb;
	
	ROUGHNESS = 0.1;
}"

[sub_resource type="OpenSimplexNoise" id=13]
lacunarity = 4.0

[sub_resource type="NoiseTexture" id=14]
seamless = true
noise = SubResource( 13 )

[sub_resource type="OpenSimplexNoise" id=15]

[sub_resource type="NoiseTexture" id=16]
seamless = true
noise = SubResource( 15 )

[sub_resource type="OpenSimplexNoise" id=17]

[sub_resource type="NoiseTexture" id=18]
seamless = true
as_normalmap = true
bump_strength = 4.0
noise = SubResource( 17 )

[resource]
shader = SubResource( 11 )
shader_param/speed = 0.05
shader_param/color = Color( 0.611765, 0.32549, 0.756863, 0.207843 )
shader_param/edge_color = Color( 1, 1, 1, 1 )
shader_param/edge_scale = 5.0
shader_param/near = 0.1
shader_param/far = 100.0
shader_param/wave_strength = Vector2( 5, 5 )
shader_param/wave_frequency = Vector2( 12, 12 )
shader_param/time_factor = Vector2( 1, 2 )
shader_param/noise1 = SubResource( 14 )
shader_param/noise2 = SubResource( 16 )
shader_param/normalmap = SubResource( 18 )
